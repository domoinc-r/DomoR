get_schema <- function(id) {
# check that required env variables exist
if(!exists("customer", .domo_env) || !exists("auth.token", .domo_env)) {
stop("Both a customer instance and token are required, please set with 'DomoR::init('customer', 'token')'")
}
# if the id is a number, assume it's from a previous list of data sources
data_source_id <- id
if(is.numeric(id)) {
if (!exists('last_data_source_list', .domo_env))
stop("no previous run to index into", call. = F)
ids <- get('last_data_source_list', .domo_env)
data_source_id <- ids[[id]]
}
get_url <- paste0(.domo_env$customer.url, '/api/data/v2/datasources/', data_source_id, '/schema')
all.headers <- httr::add_headers(c(.domo_env$auth.token, .domo_env$user.agent,
'Accept'='text/csv'))
get_result <- httr::GET(get_url, all.headers, .domo_env$config, ...)
# handle errors
httr::stop_for_status(get_result)
if(guessEncoding){
guessEncoding <- readr::guess_encoding(get_result$content)
}else{
guessEncoding <- NULL;
}
if(is.null(guessEncoding)){
guessEncodingValue <- 'UTF-8'
}else{
guessEncodingValue <- guessEncoding$encoding[1]
if(guessEncodingValue=='ASCII'){
guessEncodingValue <- 'UTF-8'
}
df <- httr::content(get_result,na=c('\\N'),encoding=guessEncodingValue, ...) # type="domo/csv"
if(use.make.names){
names(df) <- make.names(tolower(names(df)))
}
return(data.frame(df))
}
# add empty .domo_env as parent
.domo_env <- new.env()
haspkg <- require(dplyr)
if( haspkg == FALSE ){
install.packages('dplyr')
require(dplyr)
}
#' @return A \code{data.frame} built from the requested Domo data source.
#' @export
#' @examples
#' DomoR::init(Sys.getenv('DOMO_BASE_URL'), Sys.getenv('DEVELOPER_TOKEN'))
#' df <- DomoR::fetch('4826e3fb-cd23-468d-9aff-96bf5b690247')
#' DomoR::list_ds(limit=10)
#' df <- DomoR::fetch(1)
#' df <- DomoR::fetch('4826e3fb-cd23-468d-9aff-96bf5b690247',
#'   c('accountid', 'lastname', 'startdate'),
#'   httr::progress())
fetch <- function(id, columns = NULL, use.make.names=FALSE, guessEncoding=TRUE, ...) {
# check that required env variables exist
if(!exists("customer", .domo_env) || !exists("auth.token", .domo_env)) {
stop("Both a customer instance and token are required, please set with 'DomoR::init('customer', 'token')'")
}
# if the id is a number, assume it's from a previous list of data sources
data_source_id <- id
if(is.numeric(id)) {
if (!exists('last_data_source_list', .domo_env))
stop("no previous run to index into", call. = F)
ids <- get('last_data_source_list', .domo_env)
data_source_id <- ids[[id]]
}
get_url <- paste0(.domo_env$customer.url, '/api/data/v2/datasources/', data_source_id, '/dataversions/latest?includeHeader=true')
all.headers <- httr::add_headers(c(.domo_env$auth.token, .domo_env$user.agent,
'Accept'='text/csv'))
get_result <- httr::GET(get_url, all.headers, .domo_env$config, ...)
# handle errors
httr::stop_for_status(get_result)
if(guessEncoding){
guessEncoding <- readr::guess_encoding(get_result$content)
}else{
guessEncoding <- NULL;
}
if(is.null(guessEncoding)){
guessEncodingValue <- 'UTF-8'
}else{
guessEncodingValue <- guessEncoding$encoding[1]
if(guessEncodingValue=='ASCII'){
guessEncodingValue <- 'UTF-8'
}
df <- httr::content(get_result,na=c('\\N'),encoding=guessEncodingValue, ...) # type="domo/csv"
if(use.make.names){
names(df) <- make.names(tolower(names(df)))
}
return(data.frame(df))
}
#' Create a data source from a data.frame
#'
#' @param data A data.frame from which to create the dataset
#' @param name Name to assign the dataset on Domo
#' @param description Optional description of the dataset
#' @export
#' @examples
#' df <- data.frame(matrix(rnorm(20), nrow=10))
#' DomoR::create(df, name="My Data Source Name", description="My Data Source Description")
create <- function(data, name, description='') {
# check that required env variables exist
if(!exists("customer", .domo_env) || !exists("auth.token", .domo_env)) {
stop("Both a customer instance and token are required, please set with 'DomoR::init('customer', 'token')'")
}
if(missing(name)) {
warning('Data source will be created without a name')
}
if(missing(description)) {
warning('Data source will be created without a description')
}
schema <- schema_definition(data)
json <- list(transport=list(type="API"), dataSource=list(name=name, description=description),
dataProvider=list(key="r", name="R"), schemaDefinition=list(columns=schema$columns))
body <- jsonlite::toJSON(json,auto_unbox=T)
all.headers <- httr::add_headers(c(.domo_env$auth.token, .domo_env$user.agent,
'Content-Type'='application/json',
'Accept'='application/json'))
# issue request
create_result <- httr::POST(paste0(.domo_env$customer.url, '/api/data/v1/streams'),
body=body, all.headers, .domo_env$config)
httr::stop_for_status(create_result)
# get the data source id
create_json <- httr::content(create_result)
ds <- create_json$dataSource$id
#message(paste('Created datasource: ', ds))
#use replace function to upload data.
out <- DomoR::replace_ds(ds,data)
return(ds)
}
.onLoad <- function(libname, pkgname) {
packageStartupMessage("Welcome to DomoR")
}
fetch_to_disk <- function(data_source_id, nrows=NULL, delete.tmp.file=TRUE) {
# check that required env variables exist
if(!exists("customer", .domo_env) || !exists("auth.token", .domo_env)) {
stop("Both a customer instance and token are required, please set with 'DomoR::init('customer', 'token')'")
}
get_url <- paste0(.domo_env$customer.url, '/api/data/v2/datasources/', data_source_id, '/dataversions/latest?includeHeader=true')
all.headers <- httr::add_headers(c(.domo_env$auth.token, .domo_env$user.agent, 'Accept'='text/csv'))
tmp_file <- tempfile(fileext=".csv")
print(paste0("Temp File Location :: ", tmp_file))
get_result <- httr::GET(get_url, all.headers, .domo_env$config, httr::write_disk(tmp_file, overwrite=FALSE))
# handle errors
httr::stop_for_status(get_result)
if(is.null(nrows)){
df <- read.csv(file=tmp_file, header = TRUE, sep = ",")
}else{
df <- read.csv(file=tmp_file, header = TRUE, sep = ",", nrows=nrows)
}
if(delete.tmp.file){
file.remove(tmp_file)
print(paste0("Temp file deleted successfully from location :: ", tmp_file))
}
return(df)
}
#' Determine dataflows inputs and outputs based of dataflow datasetId
#'
#' @param outDataSourceId A data source id (GUID)
#' @param use.dataflows.json TRUE returns pretty json output
#' @export
#' @examples
#' DomoR::init(Sys.getenv('DOMO_BASE_URL'), Sys.getenv('DEVELOPER_TOKEN'))
#' DomoR::list_dataflows(outDataSourceId='d0b246-3b41', use.dataflows.json=FALSE)
list_dataflows <- function(outDataSourceId=NULL, use.dataflows.json=FALSE){
# check that required env variables exist
if(!exists("customer", .domo_env) || !exists("auth.token", .domo_env)) {
stop("Both a customer instance and token are required, please set with 'DomoR::init('customer', 'token')'")
}
outDataSourceId_param <- ''
if(!is.null(outDataSourceId)) {
outDataSourceId_param <- paste0('?outDataSourceId=', outDataSourceId)
}
# make the request
get_url <- paste0(.domo_env$customer.url, '/api/dataprocessing/v1/dataflows', outDataSourceId_param)
all.headers <- httr::add_headers(c(.domo_env$auth.token, .domo_env$user.agent,
'Content-Type'='application/json'))
get_dataflow_result <- httr::GET(get_url, all.headers, .domo_env$config, nullValue=NA)
# handle errors
httr::stop_for_status(get_dataflow_result)
get_result <- unlist(httr::content(get_dataflow_result,check.names=FALSE),recursive=FALSE)
if(use.dataflows.json){
return(get_result)
}else{
my_origin='1970-01-01'
out <- data.frame(
id=get_result$id,
name=get_result$name,
databaseType=get_result$databaseType,
dapDataFlowId=get_result$dapDataFlowId,
responsibleUserId=get_result$responsibleUserId,
lastExecution_beginTime=as.POSIXct(as.numeric(get_result$lastExecution$beginTime)/1000, origin=my_origin),
# lastExecution_endTime=as.POSIXct(as.numeric(get_result$lastExecution$endTime)/1000, origin=my_origin),
lastExecution_lastUpdated=as.POSIXct(as.numeric(get_result$lastExecution$lastUpdated)/1000, origin=my_origin),
lastExecution_state=get_result$lastExecution$state,
created=as.POSIXct(as.numeric(get_result$created)/1000, origin=my_origin),
modified=as.POSIXct(as.numeric(get_result$modified)/1000, origin=my_origin),
numInputs=get_result$numInputs,
numOutputs=get_result$numOutputs,
executionSuccessCount=get_result$executionSuccessCount
)
inputs <- dplyr::bind_rows(lapply(get_result$inputs,function(x,df_id=get_result$id){
input_out <- data.frame(
id=df_id,
type='input',
ds_id=x$dataSourceId,
ds_name=x$dataSourceName
)
return(input_out)
}))
outputs <- dplyr::bind_rows(lapply(get_result$outputs,function(x,df_id=get_result$id){
output_out <- data.frame(
id=df_id,
type='output',
ds_id=x$dataSourceId,
ds_name=x$dataSourceName
)
return(output_out)
}))
in_out <- dplyr::bind_rows(inputs,outputs)
out_final <- dplyr::left_join(out,in_out,by=c('id'='id'))
return(out_final)
}
#' Determine dataversions based on dataset Id
#'
#' @param id A data source id (GUID)
#' @param use.dataversions.json TRUE returns pretty json output
#' @export
#' @examples
#' DomoR::init(Sys.getenv('DOMO_BASE_URL'), Sys.getenv('DEVELOPER_TOKEN'))
#' DomoR::list_dataset_versions(id='d0b246-3b41')
list_dataset_versions <- function(id, use.dataversions.json=FALSE){
if(is.null(id)){
stop("Datasource ID is a required field")
}
get_url <- paste0(.domo_env$customer.url, '/api/data/v3/datasources/', id, '/dataversions/details')
all.headers <- httr::add_headers(c(.domo_env$auth.token, .domo_env$user.agent, 'Content-Type'='application/json'))
get_result <- httr::GET(get_url, all.headers, .domo_env$config)
# handle errors
httr::stop_for_status(get_result)
if(use.dataversions.json){
json <- httr::content(get_result, as = "parsed", type = "application/json")
return(json)
}else{
#json <- httr::content(get_result, as = "text")
#df <- jsonlite::fromJSON(json)
#final <- do.call(rbind, df)
#json <- httr::content(get_result, as = "parsed", type = "application/json")
#final <- data.frame(json)
#return(final)
final_result <- NULL
r <- httr::content(get_result)
num_ds <- length(r)
ds_meta <- data.frame(matrix(0,nrow=num_ds,ncol=10))
names(ds_meta) <- c('dataSourceId','schemaId','dataVersionId','status','statusMessage',
'datetimeRecorded','datetimeUploadCompleted','runDurationSeconds','sizeBytes','rowCount')
if (num_ds > 0) {
for (i in 1:num_ds) {
row <- unlist(r[[i]])
for (j in names(ds_meta)) {
if (is.null(row[j])) { ds_meta[i,j] <- 0 } else { ds_meta[i,j] <- row[j] }
}
date_vars <- c('datetimeRecorded','datetimeUploadCompleted')
for (key in date_vars) {
ds_meta[ , key] <- as.POSIXct(as.numeric(ds_meta[ , key])/1000,origin='1970-01-01')
}
if(is.null(final_result)){
final_result <- data.frame(ds_meta)
}else{
final_result <- merge(final_result, data.frame(ds_meta), all=T)
}
return(final_result)
}
#' @param owner_id Filter by dataset owner ID
#' @param display_type Filter results by type.  e.g. 'salesforce'
#' @param data_provider Filter results by authorization type.  e.g. 'salesforce'
#' @param order_by Order the results by column.  e.g. 'name'
#' @return A \code{data.frame} containing a list of available datasets
#' @export
#' @examples
#' DomoR::init(Sys.getenv('DOMO_BASE_URL'), Sys.getenv('DEVELOPER_TOKEN'))
#' DomoR::list_ds()
#' DomoR::list_ds(limit=10, name="sales+results")
list_ds <- function(limit=50, name=NULL, offset=0, owner_id=NULL, display_type=NULL, data_provider=NULL, order_by=NULL) {
# check that required env variables exist
if(!exists("customer", .domo_env) || !exists("auth.token", .domo_env)) {
stop("Both a customer instance and token are required, please set with 'DomoR::init('customer', 'token')'")
}
if (limit > 50) {
limit = 50
warning('using maximum request limit of 50')
}
# optional parameters
limit_param <- paste0('&limit=', ifelse(limit < 1, 50, limit))
name_param <- ''
if(!is.null(name)) {
name_param <- paste0('&nameLike=', URLencode(name))
}
owner_id_param <- ''
if(!is.null(owner_id)) {
owner_id_param <- paste0('&ownerId=', owner_id)
}
display_type_param <- ''
if(!is.null(display_type)) {
display_type_param <- paste0('&displayType=', display_type)
}
data_provider_param <- ''
if(!is.null(data_provider)) {
data_provider_param <- paste0('&dataProviderType=', data_provider)
}
order_by_param <- ''
if(!is.null(order_by)) {
if(order_by %in% c('name', 'lastTouched', 'lastUpdated', 'cardCount', 'cardViewCount')) {
order_by_param <- paste0('&orderBy=', order_by)
}
else {
stop("Invalid 'order_by' paramter, valid options are: 'name', 'lastTouched', 'lastUpdated', 'cardCount', 'cardViewCount'")
}
all_result <- NULL # data.frame()
repeat {
offset_param <- paste0('&offset=', offset)
# make the request
list_url <- paste0(.domo_env$customer.url, '/api/data/v3/datasources?fields=id,name',
limit_param, name_param, offset_param, owner_id_param, display_type_param, data_provider_param, order_by_param)
all.headers <- httr::add_headers(c(.domo_env$auth.token, .domo_env$user.agent,
'Content-Type'='application/json'))
list_result <- httr::GET(list_url, all.headers, .domo_env$config, nullValue=NA)
# handle errors
httr::stop_for_status(list_result)
r <- httr::content(list_result)$dataSources
num_ds <- length(r)
ds_meta <- data.frame(matrix(0,nrow=num_ds,ncol=17))
names(ds_meta) <- c(
'id',
'displayType',
'dataProviderType',
'type',
'name',
'description',
'owner.id',
'owner.name',
'created',
'lastTouched',
'lastUpdated',
'nextUpdate',
'updateFrequency',
'rowCount',
'columnCount',
'cardInfo.cardCount',
'cardInfo.cardViewCount')
if (num_ds > 0) {
for (i in 1:num_ds) {
row <- unlist(r[[i]])
for (j in names(ds_meta)) {
if (is.null(row[j])) { ds_meta[i,j] <- 0 } else { ds_meta[i,j] <- row[j] }
}
date_vars <- c('created','lastTouched','lastUpdated','nextUpdate')
for (key in date_vars) {
ds_meta[ , key] <- as.POSIXct(as.numeric(ds_meta[ , key])/1000,origin='1970-01-01')
}
if(is.null(all_result))
all_result <- data.frame(ds_meta)
else
all_result <- merge(all_result, data.frame(ds_meta), all=T)
offset <- offset + num_ds
if (num_ds < 50 || limit > 1) break;
}
# assign data source list to environment for easy retrieval by id
assign("last_data_source_list", all_result$id, .domo_env)
return(all_result)
}
#' Determine my Domo user ID
#'
#' @export
#' @examples
#' DomoR::init(Sys.getenv('DOMO_BASE_URL'), Sys.getenv('DEVELOPER_TOKEN'))
#' DomoR::owner()
owner <- function() {
if(!exists("customer", .domo_env) || !exists("auth.token", .domo_env)) {
stop("Both a customer instance and token are required, please set with 'DomoR::init('customer', 'token')'")
}
get_url <- paste0(.domo_env$customer.url, '/api/content/v2/users/me')
all.headers <- httr::add_headers(c(.domo_env$auth.token, .domo_env$user.agent,
'Content-Type'='application/json',
'Accept'='application/json'))
get_result <- httr::GET(get_url, all.headers, .domo_env$config)
# handle errors
httr::stop_for_status(get_result)
result <- httr::content(get_result,check.names=FALSE)
return(result$id)
}
#' Replace a data source from a data.frame
#'
#' @param data_source_id A GUID corresponding to the datasource ID from Domo.
#' @param data A data.frame from which to create a data source.
#' @param ... Additional curl and httr parameters
#' @export
#' @examples
#' DomoR::init(Sys.getenv('DOMO_BASE_URL'), Sys.getenv('DEVELOPER_TOKEN'))
#' df <- data.frame(matrix(rnorm(20), nrow=10))
#' DomoR::replace_ds(data_source_id,df)
replace_ds <- function(data_source_id,data,...) {
# check that required env variables exist
if(!exists("customer", .domo_env) || !exists("auth.token", .domo_env)) {
stop("Both a customer instance and token are required, please set with 'DomoR::init('customer', 'token')'")
}
domoSchema <- jsonlite::toJSON(list(columns=schema_domo(data_source_id)),auto_unbox = T)
#print(paste("SCHEMA DOMO",domoSchema))
dataSchema <- jsonlite::toJSON(list(columns=schema_data(data)))
#print(paste("SCHEMA DATA",dataSchema))
stream_id <- lookup_stream(data_source_id)$id
if(!(identical(domoSchema,dataSchema))){
headers <- httr::add_headers(c(.domo_env$auth.token, .domo_env$user.agent,'Content-Type'='application/json','Accept'='application/json'))
body <- jsonlite::toJSON(list( # id=stream_id,
schemaDefinition=list(columns=schema_definition(data)$columns)), auto_unbox = T)
create_result <- httr::PUT(paste0(.domo_env$customer.url, '/api/data/v1/streams/', stream_id),
body=body, headers, .domo_env$config)
httr::stop_for_status(create_result)
warning('schema changed')
}
exec_id <- start_execution(stream_id)
total_rows <- nrow(data)
CHUNKSZ <- estimate_rows(data)
start <- 1
end <- total_rows
part <- 1
repeat {
if (total_rows - end > CHUNKSZ) {
end <- start + CHUNKSZ
} else {
end <- total_rows
}
data_frag <- data[start:end,]
#uploadPart (id, uploadId, part, data_frag)
systemInfo <- Sys.info()[["sysname"]]
if(!is.null(systemInfo) & identical("windows", tolower(systemInfo))){
uploadPart (stream_id, exec_id, part, data_frag)
}else{
uploadPartStr (stream_id, exec_id, part, data_frag)
}
part <- part + 1
start <- end + 1
if (start >= total_rows)
break
}
result <- commitStream(stream_id, exec_id)
}
lookup_stream <- function (dataset_id) {
search_stream('dataSource.id', dataset_id)
}
